#include "mainwidget.h"
#include <QByteArray>
#include <QSqlDatabase>
#include <QSqlQuery>
#include <QVariant>
#include <QDebug>
#include <QDateTime>
#include <QPainter>
#include <QTimer>
#include <QDebug>


static  const unsigned char  Spo2_DemoData[248] =
{
    0x21, 0x21, 0x22, 0x22, 0x23, 0x22, 0x22, 0x21, 0x21,
    0x20, 0x20, 0x1f, 0x1e, 0x1d, 0x1c, 0x1b, 0x1b, 0x1a,
    0x19, 0x18, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12,
    0x11, 0x11, 0x10, 0x10, 0x0f, 0x0f, 0x0e, 0x0d, 0x0c,
    0x0c, 0x0b, 0x0a, 0x09, 0x09, 0x08, 0x07, 0x06, 0x06,
    0x05, 0x05, 0x04, 0x04, 0x03, 0x03, 0x02, 0x02, 0x01,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x03, 0x06, 0x0a, 0x0e, 0x13, 0x18, 0x1d,
    0x23, 0x28, 0x2d, 0x32, 0x37, 0x3b, 0x40, 0x44, 0x49,
    0x4d, 0x51, 0x54, 0x57, 0x58, 0x5a, 0x5a, 0x5a, 0x59,
    0x59, 0x57, 0x55, 0x52, 0x50, 0x4c, 0x49, 0x45, 0x42,
    0x3e, 0x3b, 0x37, 0x34, 0x31, 0x2f, 0x2c, 0x29, 0x26,
    0x24, 0x22, 0x20, 0x1f, 0x1f, 0x1e, 0x1e, 0x1d, 0x1d,
    0x1e, 0x1f, 0x20, 0x21, 0x21, 0x22, 0x22, 0x23, 0x22,
    0x22, 0x21, 0x21, 0x20, 0x20, 0x1f, 0x1e, 0x1d, 0x1c,
    0x1b, 0x1b, 0x1a, 0x19, 0x18, 0x18, 0x17, 0x16, 0x15,
    0x14, 0x13, 0x12, 0x11, 0x11, 0x10, 0x10, 0x0f, 0x0f,
    0x0e, 0x0d, 0x0c, 0x0c, 0x0b, 0x0a, 0x09, 0x09, 0x08,
    0x07, 0x06, 0x06, 0x05, 0x05, 0x04, 0x04, 0x03, 0x03,
    0x02, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x06, 0x0a, 0x0e,
    0x13, 0x18, 0x1d, 0x23, 0x28, 0x2d, 0x32, 0x37, 0x3b,
    0x40, 0x44, 0x49, 0x4d, 0x51, 0x54, 0x57, 0x58, 0x5a,
    0x5a, 0x5a, 0x59, 0x59, 0x57, 0x55, 0x52, 0x50, 0x4c,
    0x49, 0x45, 0x42, 0x3e, 0x3b, 0x37, 0x34, 0x31, 0x2f,
    0x2c, 0x29, 0x26, 0x24, 0x22, 0x20, 0x1f, 0x1f, 0x1e,
    0x1e, 0x1d, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x21, 0x22,
    0x22, 0x23, 0x22, 0x22, 0x21,
};


static unsigned short wavaData[248];

MainWidget::MainWidget(QWidget *parent)
    : QWidget(parent)
{
    // 0. 判断数据库是否已经添加

    // 1.加载数据库驱动
    QSqlDatabase db = QSqlDatabase::addDatabase("QSQLITE");

    // 2. 设置数据库名
    db.setDatabaseName("F:/Qt Project/test.db");

    // 3. 打开数据
    if (!db.open())
    {
        qDebug()<<"打开失败";
    }

    // 4.准备数据
    QByteArray ba;
    unsigned char ch;
    for(int i=0; i<248; i++)
    {
        ch = (Spo2_DemoData[i] >> 8) & 0xff;
        ba.append(ch);  // 高字节
        ch = Spo2_DemoData[i] & 0xff;
        ba.append(ch);  // 低字节
    }

    // 5.执行插入语句
    QSqlQuery query(db);
    QString sql = "insert into sample values(null, 1, :wavaData, datetime('now', 'localtime'));";
    query.prepare(sql);
    query.bindValue(":wavaData", QVariant(ba));
    if (query.exec())
    {
        qDebug() << "插入成功";
    }
    else
    {
        qDebug() << "插入失败";
    }

    // 6.读取
    sql = "select * from sample where sampleId='4';";
    query.exec(sql);
//    QByteArray ba;
    while(query.next())
    {
        qDebug() << query.value(0).toInt();
        qDebug() << query.value(1).toInt();
        ba = query.value(2).toByteArray();
        qDebug() << query.value(3).toDateTime().toString("yyyy-MM-dd HH:mm:ss");
    }

    unsigned short usValue = 0;
    int cnt = 0;
    for(int i=0; i<ba.size(); i+=2)
    {
        usValue = 0;
        ch = ba.at(i);
        usValue |= (ch << 8);  // 高字节
        ch = ba.at(i+1);
        usValue |= ch&0xff;    // 低字节

        wavaData[cnt++] = usValue;  // 保存
    }
    qDebug() << "end..";



    this->resize(600,200);
    pix_= new QPixmap(this->width(),this->height());
    pix_->fill(Qt::black);

    QTimer* timer = new QTimer(this);
    connect(timer,SIGNAL(timeout()),this,SLOT(refreshPixmap()));
    timer->start(10);
}


void MainWidget::refreshPixmap()
{
    static int pointX = 0;
    static int pointY = 0;
    static int direct = 0;

    QPainter painter(pix_);
    painter.setPen(QPen(Qt::red,5));

//    int *pecgWave


    int height = pix_->height();
    int width = pix_->width();
    direct += 1;
    pointX += 1;
    pointY = (wavaData[direct]);


    //1.2删除历史波形
    painter.save();
    painter.setPen(QPen(Qt::black,5));
    painter.drawLine(pointX+3, 0, pointX+3, height);
    painter.restore();

    //1.3 绘制
    painter.drawPoint(pointX,pointY+50);

    //1.4 一屏幕完成后，重新开始
    if (pointX >= width)
    {
        pointX = 0;
    }
    if (direct > 248)
    {
        direct = 0;
    }

    //2.更新
    this->update();
}



void MainWidget::paintEvent(QPaintEvent *event)
{
    QPainter painter(this);
    painter.drawPixmap(10, 10, pix_->width(), pix_->height(), *pix_);
}
